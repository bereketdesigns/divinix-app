---
import MainLayout from '../layouts/MainLayout.astro';
// No more Supabase imports on the frontend for this page!
---
<MainLayout title="Edit Your Profile">
  <div class="edit-container">
    <div id="loading-state"><p>Loading your profile...</p></div>
    <div id="profile-form-container" style="display: none;">
      <h1>Edit Your Profile</h1>
      <form id="profile-form">
        <label>Full Name<input type="text" name="full_name" required /></label>
        <label>Bio<textarea name="bio" rows="3" placeholder="e.g., Crafting beautiful digital experiences..."></textarea></label>
        <label>Specialty<input type="text" name="specialty" placeholder="e.g., Motion Graphics" /></label>
        <label>Portfolio URL<input type="url" name="portfolio_url" placeholder="https://your-portfolio.com" /></label>
        <label>Contact Username (from Telegram)<input type="text" name="username" readonly /></label>
        <div class="form-actions">
          <button type="button" id="logout-btn" class="btn-secondary">Log Out</button>
          <button type="submit" id="save-btn" class="btn-primary">Save Changes</button>
        </div>
        <div id="form-status" class="status-message"></div>
      </form>
    </div>
  </div>
</MainLayout>

<script>
  // --- Type-Safe Element Selectors ---
  const loadingState = document.getElementById('loading-state') as HTMLDivElement;
  const formContainer = document.getElementById('profile-form-container') as HTMLDivElement;
  const form = document.getElementById('profile-form') as HTMLFormElement;
  const logoutBtn = document.getElementById('logout-btn') as HTMLButtonElement;
  const saveBtn = document.getElementById('save-btn') as HTMLButtonElement;
  const formStatus = document.getElementById('form-status') as HTMLDivElement;

  async function loadProfile() {
    try {
      // 1. Fetch data from our own secure API endpoint
      const response = await fetch('/api/profile/get');
      if (!response.ok) {
        // If the API returns unauthorized, our cookie is bad, so we log out.
        if (response.status === 401) {
          window.location.href = '/logout'; // Redirect to a logout page
          return;
        }
        throw new Error('Failed to fetch profile.');
      }
      const profile = await response.json();

      // 2. Populate the form
      (form.elements.namedItem('full_name') as HTMLInputElement).value = profile.full_name || '';
      (form.elements.namedItem('bio') as HTMLTextAreaElement).value = profile.bio || '';
      (form.elements.namedItem('specialty') as HTMLInputElement).value = profile.specialty || '';
      (form.elements.namedItem('portfolio_url') as HTMLInputElement).value = profile.portfolio_url || '';
      (form.elements.namedItem('username') as HTMLInputElement).value = profile.username || 'Not available';

      // 3. Show the form
      loadingState.style.display = 'none';
      formContainer.style.display = 'block';
    } catch (error) {
      loadingState.textContent = 'Error loading profile. Please try logging in again.';
    }
  }

  document.addEventListener('DOMContentLoaded', loadProfile);

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    saveBtn.disabled = true;
    formStatus.textContent = 'Saving...';

    const formData = new FormData(form);
    const updates = {
      full_name: formData.get('full_name'),
      bio: formData.get('bio'),
      specialty: formData.get('specialty'),
      portfolio_url: formData.get('portfolio_url'),
    };

    try {
      const response = await fetch('/api/profile/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates),
      });

      if (!response.ok) throw new Error('Failed to save profile.');
      
      formStatus.textContent = 'Profile saved successfully!';
      formStatus.style.color = 'green';
      setTimeout(() => { formStatus.textContent = '' }, 3000);
    } catch (error) {
      formStatus.textContent = `Error: ${error.message}`;
      formStatus.style.color = 'red';
    } finally {
      saveBtn.disabled = false;
    }
  });

  logoutBtn?.addEventListener('click', () => {
    window.location.href = '/logout';
  });
</script>

<style>
  .edit-container { max-width: 600px; margin: 2rem auto; }
  #profile-form { display: flex; flex-direction: column; gap: 1.5rem; }
  #profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.5rem; }
  #profile-form input, #profile-form textarea {
    width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 12px;
    border: 1px solid var(--border-color); background-color: var(--secondary-bg-color); color: var(--text-color);
  }
  input[name="username"] { background-color: var(--bg-color); cursor: not-allowed; opacity: 0.7; }
  .form-actions { display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1rem; }
  .btn-primary, .btn-secondary {
    padding: 0.75rem 1.5rem; border: none; border-radius: 12px;
    font-size: 1rem; font-weight: 600; cursor: pointer;
  }
  .btn-primary { background-color: var(--button-color); color: var(--button-text-color); }
  .btn-secondary { background-color: var(--border-color); color: var(--text-color); }
  .status-message { margin-top: 1rem; min-height: 1.2em; text-align: right; }
</style>